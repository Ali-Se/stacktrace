#  Copyright (C) 2016, Antony Polukhin.
#
# Use, modification and distribution is subject to the Boost Software License,
# Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
# http://www.boost.org/LICENSE_1_0.txt)
#

lib dl : : <link>shared ;
lib unwind : : <link>shared ;
lib Dbghelp ;

project
  : requirements
    <toolset>msvc:<asynch-exceptions>on
    <warnings>all
    <debug-symbols>on
    <test-info>always_show_run_output
    <target-os>linux:<cxxflags>"-fvisibility=hidden"
  ;


local UNW_DEPS  = <library>unwind [ check-target-builds ../build//libunwind : : <build>no ] ;
local BT_DEPS   = <target-os>linux:<library>dl [ check-target-builds ../build//backtrace : : <build>no ] ;
local WIND_DEPS = <library>Dbghelp [ check-target-builds ../build//WinDbg : : <build>no ] ;
local NOOP_DEPS =  ;
local AUTO_DEPS = <target-os>linux:<library>dl [ check-target-builds ../build//WinDbg : <library>Dbghelp ] [ check-target-builds ../build//libunwind : <library>unwind ] ;

local LINKSHARED_UNW  = <link>shared <define>BOOST_STACKTRACE_DYN_LINK <library>/boost/stacktrace//boost_stacktrace_libunwind  $(UNW_DEPS)  ;
local LINKSHARED_BT   = <link>shared <define>BOOST_STACKTRACE_DYN_LINK <library>/boost/stacktrace//boost_stacktrace_backtrace  $(BT_DEPS)   ;
local LINKSHARED_WIND = <link>shared <define>BOOST_STACKTRACE_DYN_LINK <library>/boost/stacktrace//boost_stacktrace_windbg     $(WIND_DEPS) ;
local LINKSHARED_NOOP = <link>shared <define>BOOST_STACKTRACE_DYN_LINK <library>/boost/stacktrace//boost_stacktrace_noop       $(NOOP_DEPS) ;

lib test_impl_lib_libunwind : test_impl.cpp : $(LINKSHARED_UNW) ;
lib test_impl_lib_backtrace : test_impl.cpp : $(LINKSHARED_BT) ;
lib test_impl_lib_windbg    : test_impl.cpp : $(LINKSHARED_WIND) ;
lib test_impl_lib_noop      : test_impl.cpp : $(LINKSHARED_NOOP) ;

test-suite stacktrace_tests
  :
    # Header only tests
    [ run test.cpp test_impl.cpp        : : : <define>BOOST_STACKTRACE_USE_LIBUNWIND $(UNW_DEPS)  : libunwind_ho ]
    [ run test.cpp test_impl.cpp        : : : <define>BOOST_STACKTRACE_USE_BACKTRACE $(BT_DEPS)   : backtrace_ho ]
    [ run test.cpp test_impl.cpp        : : : <define>BOOST_STACKTRACE_USE_WINDBG $(WIND_DEPS) : windbg_ho ]
    [ run test_noop.cpp test_impl.cpp   : : : <define>BOOST_STACKTRACE_USE_NOOP $(NOOP_DEPS) : noop_ho ]
    [ run test.cpp test_impl.cpp        : : : $(AUTO_DEPS) : autodetect_ho ]

    # Test wih shared linked backends
    [ run test.cpp      : : : <library>.//test_impl_lib_libunwind $(LINKSHARED_UNW)  : libunwind_lib ]
    [ run test.cpp      : : : <library>.//test_impl_lib_backtrace $(LINKSHARED_BT)   : backtrace_lib ]
    [ run test.cpp      : : : <library>.//test_impl_lib_windbg $(LINKSHARED_WIND) : windbg_lib ]
    [ run test_noop.cpp : : : <library>.//test_impl_lib_noop $(LINKSHARED_NOOP) : noop_lib ]

    # Making sure that the examples work
    [ run ../example/getting_started.cpp : : : <define>BOOST_ENABLE_ASSERT_DEBUG_HANDLER $(LINKSHARED_UNW)  : libunwind_getting_started ]
    [ run ../example/getting_started.cpp : : : <define>BOOST_ENABLE_ASSERT_DEBUG_HANDLER $(LINKSHARED_BT)   : backtrace_getting_started ]
    [ run ../example/getting_started.cpp : : : <define>BOOST_ENABLE_ASSERT_DEBUG_HANDLER $(LINKSHARED_WIND) : windbg_getting_started ]
    [ run ../example/getting_started.cpp : : : <define>BOOST_ENABLE_ASSERT_DEBUG_HANDLER $(LINKSHARED_NOOP) : noop_getting_started ]

    [ run ../example/getting_started.cpp : : : <define>BOOST_ENABLE_ASSERT_DEBUG_HANDLER $(AUTO_DEPS) : autodetect_getting_started ]
  ;


